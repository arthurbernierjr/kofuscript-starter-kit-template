// Generated by KofuScript 0.0.3-alpha.7
var present = console.log;
// Generated by KofuScript 0.0.3-alpha.7
var ItemView;
ItemView = (function(super$) {
	extends$(ItemView, super$);
	function ItemView() {
		var instance$;
		instance$ = this;
		this.unrender = function() {
			return ItemView.prototype.unrender.apply(instance$, arguments);
		};
		this.render = function() {
			return ItemView.prototype.render.apply(instance$, arguments);
		};
		super$.apply(this, arguments);
	}
	ItemView.prototype.tagName = 'li';
	ItemView.prototype.initialize = function() {
		_.bindAll(this);
		this.model.bind('change', this.render);
		return this.model.bind('remove', this.unrender);
	};
	ItemView.prototype.render = function() {
		$(this.el).html(
			'<span>' +
				this.model.get('part1') +
				' ' +
				this.model.get('part2') +
				'</span>\n<span class="swap">swap</span>\n<button class="delete">delete</button>'
		);
		return this;
	};
	ItemView.prototype.unrender = function() {
		return $(this.el).remove();
	};
	ItemView.prototype.swap = function() {
		return this.model.set({
			part1: this.model.get('part2'),
			part2: this.model.get('part1')
		});
	};
	ItemView.prototype.remove = function() {
		return this.model.destroy();
	};
	ItemView.prototype.events = {
		'click .swap': 'swap',
		'click .delete': 'remove'
	};
	return ItemView;
})(Backbone.View);
module.exports = ItemView;
function isOwn$(o, p) {
	return {}.hasOwnProperty.call(o, p);
}
function extends$(child, parent) {
	for (var key in parent) if (isOwn$(parent, key)) child[key] = parent[key];
	function ctor() {
		this.constructor = child;
	}
	ctor.prototype = parent.prototype;
	child.prototype = new ctor();
	child.__super__ = parent.prototype;
	return child;
}
